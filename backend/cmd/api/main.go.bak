package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/goencoder/klubbspel/backend/internal/config"
	"github.com/goencoder/klubbspel/backend/internal/mongo"
	"github.com/goencoder/klubbspel/backend/internal/server"
	"github.com/rs/zerolog/log"
)

const TEST_ITERATE_COUNTER = 7

func main() {
	log.Info().Int("iteration", TEST_ITERATE_COUNTER).Msg("=== BACKEND START ===")
	fmt.Printf("=== BACKEND START - ITERATION %d ===\n", TEST_ITERATE_COUNTER)
	cfg := config.FromEnv()
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	mc, err := mongo.NewClient(ctx, cfg.MongoURI, cfg.MongoDB)
	if err != nil {
		log.Fatal().Err(err).Msg("mongo")
	}
	defer mc.Close(ctx)

	gs, gw, httpSrv := server.Bootstrap(ctx, cfg, mc)
	go func() {
		if err := gs.Serve(); err != nil {
			log.Fatal().Err(err).Msg("grpc")
		}
	}()
	go func() {
		if err := gw.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal().Err(err).Msg("gateway")
		}
	}()
	go func() {
		if err := httpSrv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal().Err(err).Msg("http")
		}
	}()

	<-ctx.Done()
	_ = gs.Shutdown()
	_ = gw.Shutdown(context.Background())
	_ = httpSrv.Shutdown(context.Background())
	os.Exit(0)
}
