syntax = "proto3";
package klubbspel.v1;
option go_package = "github.com/goencoder/klubbspel/backend/proto/gen/go/klubbspel/v1";

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// Shared metadata about a reported match.
message MatchMetadata {
  // ID of the tournament series this match belongs to.
  string series_id = 1 [(buf.validate.field).string.min_len = 1];
  // When the match was played (must be within series time boundaries).
  google.protobuf.Timestamp played_at = 2 [(buf.validate.field).required = true];
}

// Participant entry identifying either an individual player or a team side.
message MatchParticipant {
  oneof participant {
    // Individual participant identifier.
    string player_id = 1 [(buf.validate.field).string.min_len = 1];
    // Team participant identifier.
    string team_id = 2 [(buf.validate.field).string.min_len = 1];
  }
}

// Participant representation used in views with resolved display names.
message MatchParticipantView {
  MatchParticipant participant = 1;
  string display_name = 2;
}

// Result of a table tennis match (best-of format with per-side totals).
message TableTennisResult {
  // Number of games required to win the match (best-of value).
  int32 best_of = 1 [(buf.validate.field).int32 = {gte: 1, lte: 7}];
  // Games won per participant in the same order as participants[] list.
  repeated int32 games_won = 2 [(buf.validate.field).repeated = {min_items: 2, max_items: 2}];
}

// Generic scoreline result (e.g. soccer, basketball) storing points per side.
message ScorelineResult {
  repeated int32 scores = 1 [(buf.validate.field).repeated.min_items = 2];
}

// Stroke card result (e.g. golf) storing strokes per hole for each side.
message StrokeCardResult {
  message HoleScore {
    int32 hole = 1;
    int32 strokes = 2;
  }

  repeated HoleScore holes = 1;
}

// Weigh-in result (e.g. fishing) storing weight totals.
message WeighInResult {
  // Total weight in grams recorded for the match.
  double total_weight_grams = 1;
  // Optional individual weights in grams for auditing.
  repeated double individual_weights_grams = 2;
}

// Wrapper for sport-specific result payloads.
message MatchResult {
  oneof result {
    TableTennisResult table_tennis = 1;
    ScorelineResult scoreline = 2;
    StrokeCardResult stroke_card = 3;
    WeighInResult weigh_in = 4;
  }
}

// Request to report the result of a match.
message ReportMatchRequest {
  MatchMetadata metadata = 1 [(buf.validate.field).required = true];
  repeated MatchParticipant participants = 2 [(buf.validate.field).repeated = {min_items: 2, max_items: 2}];
  MatchResult result = 3 [(buf.validate.field).required = true];
}

// Response after successfully reporting a match.
message ReportMatchResponse {
  string match_id = 1;
}

// Request to update an existing match.
message UpdateMatchRequest {
  string match_id = 1 [(buf.validate.field).string.min_len = 1];
  optional google.protobuf.Timestamp played_at = 2;
  MatchResult result = 3;
}

// Response after successfully updating a match.
message UpdateMatchResponse {
  MatchView match = 1;
}

// Request to delete a match.
message DeleteMatchRequest {
  string match_id = 1 [(buf.validate.field).string.min_len = 1];
}

// Response after successfully deleting a match.
message DeleteMatchResponse {
  bool success = 1;
}

// Request to reorder matches played on the same day.
message ReorderMatchesRequest {
  repeated string match_ids = 1 [(buf.validate.field).repeated.min_items = 2];
}

// Response after successfully reordering matches.
message ReorderMatchesResponse {
  bool success = 1;
}

// Request to list matches in a tournament series with cursor-based pagination.
message ListMatchesRequest {
  string series_id = 1;
  int32 page_size = 2 [(buf.validate.field).int32 = {gte: 1, lte: 100}];
  string cursor_after = 3;
  string cursor_before = 4;
}

// View of a match with participants and sport-specific result payload.
message MatchView {
  string id = 1;
  MatchMetadata metadata = 2;
  repeated MatchParticipantView participants = 3;
  MatchResult result = 4;
}

// Response containing list of matches and cursor pagination info.
message ListMatchesResponse {
  repeated MatchView items = 1;
  string start_cursor = 2;
  string end_cursor = 3;
  bool has_next_page = 4;
  bool has_previous_page = 5;
}

// Service for managing reported matches across sports.
service MatchService {
  rpc ReportMatch(ReportMatchRequest) returns (ReportMatchResponse) {
    option (google.api.http) = { post: "/v1/matches:report" body: "*" };
  }

  rpc ListMatches(ListMatchesRequest) returns (ListMatchesResponse) {
    option (google.api.http) = { get: "/v1/series/{series_id}/matches" };
  }

  rpc UpdateMatch(UpdateMatchRequest) returns (UpdateMatchResponse) {
    option (google.api.http) = { patch: "/v1/matches/{match_id}" body: "*" };
  }

  rpc DeleteMatch(DeleteMatchRequest) returns (DeleteMatchResponse) {
    option (google.api.http) = { delete: "/v1/matches/{match_id}" };
  }

  rpc ReorderMatches(ReorderMatchesRequest) returns (ReorderMatchesResponse) {
    option (google.api.http) = { post: "/v1/matches:reorder" body: "*" };
  }
}
